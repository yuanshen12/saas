{"name": "test_57", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "@pytest.fixture(scope=\"session\")\n    def dealer_session_login():\n        chromedriver = PATH(\"../software/chromedriver.exe\")\n        os.environ['webdriver.chrome.driver'] = chromedriver\n        global driver\n        driver = webdriver.Chrome(chromedriver)\n        driver.get(LD.get_url['url'])\n        driver.maximize_window()\n        driver.implicitly_wait(20)\n        loc(driver).get_login_click()\n        auth = Auth(driver).auth_all('../img/img_03.png')\n>       loc(driver).get_login(LD.login_data[\"username\"], LD.login_data[\"password\"], auth)\n\nconftest.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Locators\\CommonLT.py:37: in get_login\n    self.click_element(self.click_subscribe)\n..\\Common\\basepage.py:46: in click_element\n    self.get_element(EC.element_to_be_clickable, locator).click()\n..\\Common\\basepage.py:29: in get_element\n    self.wait_vs(ec, locator)\n..\\Common\\basepage.py:18: in wait_vs\n    WebDriverWait(self.driver, timeout=10, poll_frequency=0.5).until(ec(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"0758472fd091e54800cd5bdf69d40232\")>\nmethod = <selenium.webdriver.support.expected_conditions.element_to_be_clickable object at 0x088A5928>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException"}, "start": 1602840914299, "stop": 1602840914299, "uuid": "e1a3f87b-82da-445a-bca8-d49ff330213d", "historyId": "628ea6af6ee6d603e8528a3e819bd290", "testCaseId": "f602011c7028c276fe76e5da3a184091", "fullName": "test_09.TestSystem#test_57", "labels": [{"name": "story", "value": "供应商信息"}, {"name": "tag", "value": "smoke"}, {"name": "suite", "value": "test_09"}, {"name": "subSuite", "value": "TestSystem"}, {"name": "host", "value": "DESKTOP-BQG3M1K"}, {"name": "thread", "value": "22136-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_09"}]}